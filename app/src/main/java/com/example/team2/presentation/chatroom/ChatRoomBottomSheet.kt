package com.example.team2.presentation.chatroom

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ExitToApp
import androidx.compose.material.icons.filled.Notifications
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.team2.R
import androidx.compose.runtime.getValue
import androidx.compose.runtime.setValue

@Composable
fun ChatRoomBottomSheetContent() {
    var showExitDialog by remember { mutableStateOf(false) }

    Box(modifier = Modifier.fillMaxSize()) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(20.dp)
        ) {
            Text("Ï±ÑÌåÖÎ∞© Î©§Î≤Ñ", fontWeight = FontWeight.Bold, fontSize = 14.sp)
            Spacer(modifier = Modifier.height(12.dp))

            val members = listOf(
                Triple("APPLE", "ÏãúÍ∞ÅÎîîÏûêÏù∏ÌïôÍ≥º", true),
                Triple("ÎèÑÎùºÏóêÎ™Ω", "Ïª¥Ìì®ÌÑ∞Í≥µÌïôÍ≥º", false),
                Triple("ÌÅ¨Î¶¨ÎÑ•Ïä§", "ÏÇ∞ÏóÖÍ≤ΩÏòÅÍ≥µÌïôÍ≥º", false),
                Triple("ÎÇëÍπ°", "ÌïúÍµ≠Ïñ¥ÌïôÍ≥º me", false)
            )

            members.forEach { (name, dept, isLeader) ->
                Row(
                    modifier = Modifier.padding(vertical = 4.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Box(
                        modifier = Modifier
                            .size(36.dp)
                            .clip(CircleShape)
                            .background(Color.LightGray)
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        text = name,
                        fontWeight = FontWeight.Bold,
                        color = Color(0xFF574C4D)
                    )
                    Spacer(modifier = Modifier.width(4.dp))
                    Text(text = dept, fontSize = 13.sp, color = Color.Gray)
                    if (isLeader) {
                        Spacer(modifier = Modifier.width(4.dp))
                        Text("üîë")
                    }
                }
            }

            Spacer(modifier = Modifier.height(20.dp))
            Divider(color = Color(0xFFE0E0E0))
            Spacer(modifier = Modifier.height(12.dp))

            Text("Î∞© ÏÉÅÏÑ∏ ÏÑ§Î™Ö", fontWeight = FontWeight.Bold, fontSize = 14.sp)
            Spacer(modifier = Modifier.height(8.dp))
            Text("Ï†ïÍ±¥ Îß•ÎÇ† Í∞ôÏù¥ ÏãúÏºúÎìúÏã§ Î∂Ñ Íµ¨Ìï©ÎãàÎã§.", fontSize = 13.sp)

            Spacer(modifier = Modifier.height(20.dp))
            Divider(color = Color(0xFFE0E0E0))
            Spacer(modifier = Modifier.height(12.dp))

            Text("Î∞© ÌÇ§ÏõåÎìú", fontWeight = FontWeight.Bold, fontSize = 14.sp)
            Spacer(modifier = Modifier.height(8.dp))
            Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {
                KeywordChip("Îî∞Î°ú Î®πÏùÑÎûòÏöî")
                KeywordChip("Ìå®Ïä§Ìä∏Ìë∏Îìú")
                KeywordChip("4Ïù∏Ìåü")
            }

            Spacer(modifier = Modifier.height(20.dp))
            Divider(color = Color(0xFFE0E0E0))
            Spacer(modifier = Modifier.height(12.dp))

            Text("ÏÇ¨ÏßÑ Î∞è ÎèôÏòÅÏÉÅ", fontWeight = FontWeight.Bold, fontSize = 14.sp)
            Spacer(modifier = Modifier.height(12.dp))

            LazyRow(horizontalArrangement = Arrangement.spacedBy(8.dp)) {
                items(4) {
                    Box(
                        modifier = Modifier
                            .size(60.dp)
                            .clip(RoundedCornerShape(10.dp))
                            .background(Color.LightGray)
                    )
                }
            }
        }

        // ÏïÑÏù¥ÏΩò ÌïòÎã® Í≥†Ï†ï
        Row(
            modifier = Modifier
                .align(Alignment.BottomEnd)
                .padding(16.dp),
            horizontalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            IconButton(onClick = { /* ÏïåÎ¶º ÌÅ¥Î¶≠ */ }) {
                Icon(
                    imageVector = Icons.Default.Notifications,
                    contentDescription = "ÏïåÎ¶º",
                    tint = Color(0xFF574C4D),
                    modifier = Modifier.size(24.dp)
                )
            }
            IconButton(onClick = { showExitDialog = true }) {
                Icon(
                    imageVector = Icons.Default.ExitToApp,
                    contentDescription = "ÎÇòÍ∞ÄÍ∏∞",
                    tint = Color(0xFF574C4D),
                    modifier = Modifier.size(24.dp)
                )
            }
        }
    }
    if (showExitDialog) {
        AlertDialog(
            onDismissRequest = { showExitDialog = false },
            confirmButton = {
                TextButton(onClick = {
                    showExitDialog = false
                    // TODO: Ïã§Ï†ú ÎÇòÍ∞ÄÍ∏∞ Î°úÏßÅ Ï∂îÍ∞Ä (Ïòà: navController?.popBackStack())
                }) {
                    Text("ÎÇòÍ∞ÄÍ∏∞", color = Color(0xFFFFCC01), fontWeight = FontWeight.Bold)
                }
            },
            dismissButton = {
                TextButton(onClick = { showExitDialog = false }) {
                    Text("Ï∑®ÏÜå", color = Color(0xFF574C4D))
                }
            },
            title = {
                Text(
                    text = "Î∞©ÏùÑ ÎÇòÍ∞ÄÏãúÍ≤†ÏäµÎãàÍπå?",
                    fontSize = 16.sp,
                    fontWeight = FontWeight.SemiBold,
                    color = Color(0xFF574C4D)
                )
            },
            containerColor = Color.White,
            shape = RoundedCornerShape(16.dp)
        )
    }

}

@Composable
fun KeywordChip(text: String) {
    Surface(
        shape = RoundedCornerShape(20.dp),
        color = Color(0xFFFFCC01)
    ) {
        Text(
            text = text,
            fontSize = 12.sp,
            color = Color(0xFF574C4D),
            modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp)
        )
    }
}



@Preview(showBackground = true)
@Composable
fun ChatRoomBottomSheetPreview() {
    ChatRoomBottomSheetContent()
}
